{"version":3,"file":"static/js/848.01576acf.chunk.js","mappings":"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","sources":["components/Reviews/Reviews.styled.tsx","components/Reviews/Reviews.tsx","constans/Status.ts","services/Movies.services.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 16px 24px;\n`;\nexport const List = styled.ul`\n  list-style: none;\n`;\nexport const Item = styled.li`\n  &:not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\nexport const Content = styled.p`\n  margin-top: 8px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchRequest } from 'services/Movies.services';\nimport { STATUS } from 'constans/Status';\nimport { Wrapper, Item, List, Content } from './Reviews.styled';\n\ninterface IReviews {\n  id: string,\n      author: string,\n      content: string,\n}\n\ninterface IRequestReview {\n  page: number,\n  results: IReviews[]\n}\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState<IReviews[] | []>([]);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  const { movieId } = useParams<{movieId?: string}>();\n\n  useEffect(() => {\n    const getReviewsById = async (movieId?: string): Promise<void> => {\n      setStatus(STATUS.loading);\n      try {\n        const data = await fetchRequest<IRequestReview>({URL: `movie/${movieId}/reviews`});\n        onResolve(data);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n    getReviewsById(movieId);\n  }, [movieId]);\n  const onResolve = ({results}: IRequestReview): void => {\n    const dataReviews: IReviews[] = results.map(({ id, author, content }) => ({\n      id,\n      author,\n      content,\n    }));\n    setReviews(dataReviews);\n    setStatus(STATUS.success);\n  };\n\n  return (\n    <Wrapper>\n      {status === STATUS.error && <h2>NOT FOUND</h2>}\n      {status === STATUS.loading && <p>Loading...</p>}\n      {status === STATUS.success && reviews.length === 0 ? (\n        <p>We don`t have any reviews for this movie</p>\n      ) : (\n        <List>\n          {reviews.map(({ id, author, content }) => (\n            <Item key={id}>\n              <b>{author}</b>\n              <Content>{content}</Content>\n            </Item>\n          ))}\n        </List>\n      )}\n    </Wrapper>\n  );\n};\nexport default Reviews;\n"," import {Status} from 'types/typeStatus'\n\nexport const STATUS: Status = {\n    idle: 'idle',\n    loading: 'loading',\n    success: 'success',\n    error: 'error',\n}","import axios from 'axios';\n\ninterface IRequest {\n    URL: string,\n    searchName?: string,\n}\n\nconst moviesApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n});\nconst ApiKey = '51cea464d1158e7d34cacf903de39a42';\n\nexport const fetchRequest = async<T>(request: IRequest): Promise<T> => {\n    const { data } = await moviesApi.get<T>(request.URL, {\n        params: {\n            api_key: ApiKey,\n            query: request.searchName,\n        },\n    });\n    return data;\n};\n\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","List","_templateObject2","Item","_templateObject3","Content","_templateObject4","_useState","useState","_useState2","_slicedToArray","reviews","setReviews","_useState3","STATUS","_useState4","status","setStatus","movieId","useParams","useEffect","getReviewsById","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","fetchRequest","URL","concat","sent","onResolve","t0","console","log","stop","_x","apply","arguments","_ref2","dataReviews","results","map","_ref3","id","author","content","_jsxs","children","_jsx","length","_ref4","idle","loading","success","error","moviesApi","axios","baseURL","request","_yield$moviesApi$get","get","params","api_key","query","searchName","abrupt"],"sourceRoot":""}