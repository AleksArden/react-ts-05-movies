{"version":3,"file":"static/js/995.75df05d1.chunk.js","mappings":"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","sources":["constans/ImageURL.ts","constans/Status.ts","pages/MovieDetailsPage/MovieDetailsPage.styled.tsx","pages/MovieDetailsPage/MovieDetailsPage.tsx","services/Movies.services.ts"],"sourcesContent":["\nexport const IMAGE_URL: string = 'https://image.tmdb.org/t/p/w500';"," import {Status} from 'types/typeStatus'\n\nexport const STATUS: Status = {\n    idle: 'idle',\n    loading: 'loading',\n    success: 'success',\n    error: 'error',\n}","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  margin-left: 24px;\n  margin-top: 24px;\n`;\nexport const Wrapper = styled.div`\n  display: flex;\n  padding: 16px 24px;\n`;\nexport const Poster = styled.img`\n  width: 250px;\n  min-height: 375px;\n  object-fit: cover;\n`;\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 24px 16px;\n`;\n\nexport const Thumb = styled.div`\n  padding: 16px 24px;\n  border-top: 2px solid black;\n  border-bottom: 2px solid black;\n`;\nexport const List = styled.ul`\n  list-style: none;\n`;\nexport const Item = styled.li`\n  padding: 4px;\n`;\nexport const Error = styled.h2`\n  margin-left: 24px;\n  margin-top: 24px;\n`;\nexport const Load = styled.p`\n  margin-left: 24px;\n  margin-top: 24px;\n`;\nexport const Div = styled.div`\n  margin-top: 16px;\n  margin-left: 24px;\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport {\n  Link,\n  useParams,\n  Outlet,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport { fetchRequest } from 'services/Movies.services';\nimport {\n  Wrapper,\n  Poster,\n  Content,\n  Thumb,\n  Button,\n  List,\n  Item,\n  Error,\n  Load,\n  Div,\n} from './MovieDetailsPage.styled';\nimport { IMAGE_URL } from 'constans/ImageURL';\nimport { STATUS } from 'constans/Status';\nimport imageReplace from 'assets/poster/poster-not-found.jpg';\nimport { DetailsMovie } from 'types/typeMovie';\nimport { FetchDetailsMovie } from 'types/typeFetchMovie';\n\nconst MovieDetailsPage = () => {\n  const [movie, setMovie] = useState<DetailsMovie | null>(null);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  \n  const { movieId } = useParams<{movieId?: string}>();\n\n  useEffect(() => {\n    const getMovieDetailsById = async (movieId?: string): Promise<void> => {\n      setStatus(STATUS.loading);\n      try {\n        const data = await fetchRequest<FetchDetailsMovie>({URL:`movie/${movieId}`});\n        onResolve(data);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n    getMovieDetailsById(movieId);\n  }, [movieId]);\n  const onResolve = (data: FetchDetailsMovie): void => {\n    const dataMovie: DetailsMovie = {\n      title: data.original_title,\n      releaseDate: new Date(data.release_date).getFullYear(),\n      overview: data.overview,\n      genres: data.genres.map(item => item.name).join(' '),\n      poster: data.poster_path,\n      voteAverage: (data.vote_average * 10).toFixed(0),\n    };\n    setMovie(dataMovie);\n    setStatus(STATUS.success);\n  };\n  return (\n    <>\n      {status === STATUS.error && <Error>NOT FOUND</Error>}\n      {status === STATUS.loading && <Load>Loading...</Load>}\n      {status === STATUS.success && movie && (\n        <>\n          <Button type=\"button\" onClick={() => navigate(location?.state?.from)}>\n            Go back\n          </Button>\n          <Wrapper>\n            {movie.poster ? (\n              <Poster\n                src={`${IMAGE_URL}` + movie.poster}\n                alt={`Poster ${movie.title}`}\n              />\n            ) : (\n              <Poster src={imageReplace} />\n            )}\n            <Content>\n              {movie.releaseDate ? (\n                <h2>\n                  {movie.title} ({movie.releaseDate})\n                </h2>\n              ) : (\n                <h2>{movie.title}</h2>\n              )}\n              <p>User score {movie.voteAverage}%</p>\n              <b>Overview</b>\n              {movie.overview ? (\n                <p>{movie.overview}</p>\n              ) : (\n                <p>Not information</p>\n              )}\n              <b>Genres</b>\n              {movie.genres ? <p>{movie.genres}</p> : <p>Not information</p>}\n            </Content>\n          </Wrapper>\n          <Thumb>\n            <p>Additional information</p>\n            <List>\n              <Item>\n                <Link to=\"cast\" state={location.state}>\n                  Cast\n                </Link>\n              </Item>\n              <Item>\n                <Link to=\"reviews\" state={location.state}>\n                  Reviews\n                </Link>\n              </Item>\n            </List>\n          </Thumb>\n          <Suspense fallback={<Div>Loading...</Div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\nexport default MovieDetailsPage;\n","import axios from 'axios';\n\ninterface IRequest {\n    URL: string,\n    searchName?: string,\n}\n\nconst moviesApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n});\nconst ApiKey = '51cea464d1158e7d34cacf903de39a42';\n\nexport const fetchRequest = async<T>(request: IRequest): Promise<T> => {\n    const { data } = await moviesApi.get<T>(request.URL, {\n        params: {\n            api_key: ApiKey,\n            query: request.searchName,\n        },\n    });\n    return data;\n};\n\n"],"names":["IMAGE_URL","STATUS","idle","loading","success","error","Button","styled","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","Poster","_templateObject3","Content","_templateObject4","Thumb","_templateObject5","List","_templateObject6","Item","_templateObject7","Error","_templateObject8","Load","_templateObject9","Div","_templateObject10","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","status","setStatus","navigate","useNavigate","location","useLocation","movieId","useParams","useEffect","getMovieDetailsById","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","fetchRequest","URL","concat","sent","onResolve","t0","console","log","stop","_x","apply","arguments","dataMovie","title","original_title","releaseDate","Date","release_date","getFullYear","overview","genres","map","item","name","join","poster","poster_path","voteAverage","vote_average","toFixed","_jsxs","_Fragment","children","_jsx","type","onClick","_location$state","state","from","src","alt","imageReplace","Link","to","Suspense","fallback","Outlet","moviesApi","axios","baseURL","request","_yield$moviesApi$get","get","params","api_key","query","searchName","abrupt"],"sourceRoot":""}