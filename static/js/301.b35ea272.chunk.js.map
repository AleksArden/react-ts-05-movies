{"version":3,"file":"static/js/301.b35ea272.chunk.js","mappings":"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","sources":["constans/Status.ts","pages/MoviesPage/MoviesPage.styled.tsx","pages/MoviesPage/MoviesPage.tsx","services/Movies.services.ts"],"sourcesContent":[" import {Status} from 'types/typeStatus'\n\nexport const STATUS: Status = {\n    idle: 'idle',\n    loading: 'loading',\n    success: 'success',\n    error: 'error',\n}","import styled from 'styled-components';\nexport const Form = styled.form`\n  padding: 24px 48px;\n`;\nexport const Input = styled.input`\n  width: 300px;\n`;\nexport const List = styled.ul`\n  padding: 0 48px 24px;\n`;\nexport const Item = styled.li`\n  padding: 4px;\n`;\nexport const Error = styled.h2`\n  margin-left: 48px;\n`;\nexport const Load = styled.p`\n  margin-left: 48px;\n`;\n","import { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { Form, Input, Item, List, Error, Load } from './MoviesPage.styled';\nimport { fetchRequest} from 'services/Movies.services';\nimport { STATUS } from 'constans/Status';\nimport Notiflix from 'notiflix';\nimport { Movie } from 'types/typeMovie';\nimport {  IResponse } from 'types/typeFetchMovie';\n\nNotiflix.Notify.init({\n  width: '400px',\n  fontSize: '20px',\n  cssAnimationStyle: 'zoom',\n  position: 'center-center',\n});\n\nconst MoviesPage = () => {\n  const [value, setValue] = useState('')\n  const [status, setStatus] = useState(STATUS.idle);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState<Movie[] | []>([]);\n  const searchName = searchParams.get('query');\n  const location = useLocation();\n\nconst handleChange = ({target: {value}}: React.ChangeEvent<HTMLInputElement>): void => {\n  setValue(value)\n}\n\n  const handleSubmit = (evt: React.FormEvent<HTMLFormElement>): void => {\n    evt.preventDefault();\n    if (value === '') {\n      Notiflix.Notify.info('Please, fill in the search field!');\n    }\n    setMovies([]);\n    setSearchParams({ query: value });\n  };\n  useEffect(() => {\n    if (!searchName) return;\n    if (searchName === '') return;\n    const getSearchMovies = async () => {\n      setStatus(STATUS.loading);\n      try {\n        const data = await fetchRequest<IResponse>({URL: `search/movie`,searchName});\n        onResolve(data);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n    getSearchMovies();\n  }, [searchName]);\n\n  const onResolve = ({results}: IResponse) => {\n    if (results.length === 0) {\n      Notiflix.Notify.failure(\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      setStatus(STATUS.idle);\n      return;\n    }\n    const moviesName: Movie[] = results.map(({ id, original_title: title }) => ({\n      id,\n      title,\n    }));\n    setMovies(moviesName);\n    setStatus(STATUS.success);\n  };\n\n  return (\n    <div>\n      <Form onSubmit={handleSubmit}>\n        <Input type=\"text\" autoComplete=\"off\" name=\"search\" value={value} onChange={handleChange} />\n        <button type=\"submit\">Search</button>\n      </Form>\n      {status === STATUS.error && <Error>NOT FOUND</Error>}\n      {status === STATUS.loading && <Load>Loading...</Load>}\n      <List>\n        {movies &&\n          movies.map(({ id, title }) => (\n            <Item key={id}>\n              <Link to={`${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </Item>\n          ))}\n      </List>\n    </div>\n  );\n};\nexport default MoviesPage;\n","import axios from 'axios';\n\ninterface IRequest {\n    URL: string,\n    searchName?: string,\n}\n\nconst moviesApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n});\nconst ApiKey = '51cea464d1158e7d34cacf903de39a42';\n\nexport const fetchRequest = async<T>(request: IRequest): Promise<T> => {\n    const { data } = await moviesApi.get<T>(request.URL, {\n        params: {\n            api_key: ApiKey,\n            query: request.searchName,\n        },\n    });\n    return data;\n};\n\n"],"names":["STATUS","idle","loading","success","error","Form","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","List","_templateObject3","Item","_templateObject4","Error","_templateObject5","Load","_templateObject6","Notiflix","width","fontSize","cssAnimationStyle","position","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","status","setStatus","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","_useState5","_useState6","movies","setMovies","searchName","get","location","useLocation","useEffect","getSearchMovies","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","fetchRequest","URL","sent","onResolve","t0","console","log","stop","apply","arguments","_ref3","results","length","moviesName","map","_ref4","id","title","original_title","_jsxs","children","onSubmit","evt","preventDefault","query","_jsx","type","autoComplete","name","onChange","_ref","target","_ref5","Link","to","concat","state","from","moviesApi","axios","baseURL","request","_yield$moviesApi$get","params","api_key","abrupt","_x"],"sourceRoot":""}