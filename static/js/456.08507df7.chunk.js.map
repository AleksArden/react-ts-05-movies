{"version":3,"file":"static/js/456.08507df7.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.tsx","components/Cast/Cast.tsx","constans/ImageURL.ts","constans/Status.ts","services/Movies.services.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  padding: 16px 24px;\n`;\nexport const List = styled.ul`\n  list-style: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  width: 400px;\n  padding: 8px 0;\n  border-bottom: 1px solid black;\n`;\nexport const Thumb = styled.div`\n  padding-left: 16px;\n`;\nexport const Name = styled.p`\n  margin-bottom: 8px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { IMAGE_URL } from 'constans/ImageURL';\nimport {fetchRequest } from 'services/Movies.services';\nimport { STATUS } from 'constans/Status';\nimport { Wrapper, List, Item, Thumb, Name } from './Cast.styled';\nimport imageReplace from 'assets/poster/poster-not-found.jpg';\n\ninterface ICast {\n   cast_id: string,\n    character: string,\n    name: string,\n     profile_path: string,\n}\ninterface IRequestCast {\n  cast: ICast[],\n}\n\nconst Cast = () => {\n  const [cast, setCast] = useState<ICast[] | []>([]);\n  const [status, setStatus] = useState(STATUS.idle);\n\n  const { movieId } = useParams<{movieId?: string}>();\n\n  useEffect(() => {\n    const getCastById = async (movieId?: string):Promise<void> => {\n      setStatus(STATUS.loading);\n      try {\n        const data = await fetchRequest<IRequestCast>({URL: `movie/${movieId}/credits`});\n        onResolve(data);\n      } catch (error) {\n        console.log(error);\n        setStatus(STATUS.error);\n      }\n    };\n    getCastById(movieId);\n  }, [movieId]);\n\n  const onResolve = ({cast}: IRequestCast) => {\n    const dataCast: ICast[] = cast.map(({ cast_id, character, name, profile_path }) => ({\n     cast_id,\n    character,\n    name,\n     profile_path,\n    }));\n\n    setCast(dataCast);\n    setStatus(STATUS.success);\n  };\n  return (\n    <Wrapper>\n      {status === STATUS.error && <h2>NOT FOUND</h2>}\n      {status === STATUS.loading && <p>Loading...</p>}\n      {status === STATUS.success && cast.length === 0 ? (\n        <p>Not information</p>\n      ) : (\n        <List>\n          {cast.map(({ cast_id, character, name, profile_path }) => (\n            <Item key={cast_id}>\n              {profile_path ? (\n                <img src={`${IMAGE_URL}` + profile_path} alt={name} width=\"150\" />\n              ) : (\n                <img src={imageReplace} alt=\"Not poster\" width=\"150\" />\n              )}\n              <Thumb>\n                <Name>{name}</Name>\n                <p>\n                  <b>Character:</b> {character}\n                </p>\n              </Thumb>\n            </Item>\n          ))}\n        </List>\n      )}\n    </Wrapper>\n  );\n};\nexport default Cast;\n","\nexport const IMAGE_URL: string = 'https://image.tmdb.org/t/p/w500';"," import {Status} from 'types/typeStatus'\n\nexport const STATUS: Status = {\n    idle: 'idle',\n    loading: 'loading',\n    success: 'success',\n    error: 'error',\n}","import axios from 'axios';\n\ninterface IRequest {\n    URL: string,\n    searchName?: string,\n}\n\nconst moviesApi = axios.create({\n    baseURL: 'https://api.themoviedb.org/3/',\n});\nconst ApiKey = '51cea464d1158e7d34cacf903de39a42';\n\nexport const fetchRequest = async<T>(request: IRequest): Promise<T> => {\n    const { data } = await moviesApi.get<T>(request.URL, {\n        params: {\n            api_key: ApiKey,\n            query: request.searchName,\n        },\n    });\n    return data;\n};\n\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","List","_templateObject2","Item","_templateObject3","Thumb","_templateObject4","Name","_templateObject5","_useState","useState","_useState2","_slicedToArray","cast","setCast","_useState3","STATUS","_useState4","status","setStatus","movieId","useParams","useEffect","getCastById","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","fetchRequest","URL","concat","sent","onResolve","t0","console","log","stop","_x","apply","arguments","_ref2","dataCast","map","_ref3","cast_id","character","name","profile_path","_jsxs","children","_jsx","length","_ref4","src","IMAGE_URL","alt","width","imageReplace","idle","loading","success","error","moviesApi","axios","baseURL","request","_yield$moviesApi$get","get","params","api_key","query","searchName","abrupt"],"sourceRoot":""}